type ServiceCovered {
  serviceCoveredID: ID!
  name: String
  percentageCovered: Int
  maxAmount: Int
  maxVisits: Int
  maxUnits: Int
  unitMinutesSize: Int
  timePeriod: Int #calculate in months?
  serviceGroup: ServiceGroup
  deleted: Boolean
  # providers: [Provider]!
}

type Query {
  getServicesCoveredBy(serviceGroupID: ID): [ServiceCovered]
}

type Mutation {
  createServiceCovered(input: ServiceCoveredInput!): ServiceCovered
  updateServiceCovered(
    serviceCoveredID: ID!
    input: ServiceCoveredInput!
  ): ServiceCovered
  deleteServiceCovered(serviceCoveredID: ID!): ServiceCovered
}

input ServiceCoveredInput {
  name: String
  percentageCovered: Int
  maxAmount: Int
  maxVisits: Int
  maxUnits: Int
  unitMinutesSize: Int
  timePeriod: Int
  serviceGroupID: ID
  deleted: Boolean
}

# query {
#   getServiceCoverages {
#     serviceCoveredID
#     name
#     percentageCovered
#     maxAmount
#     maxVisits
#     maxUnits
#     unitMinutesSize
#     timePeriod
#     serviceGroup {
#       serviceGroupID
#       name
#       percentageCovered
#       maxCombined
#       timePeriod
#     }
#   }
# }

# mutation {
#   createServiceCovered(input: {
#     name: "ServiceCovered_name"
#     percentageCovered: 50
#     maxAmount: 100
#     maxVisits: 10
#     maxUnits: 20
#     unitMinutesSize: 30
#     timePeriod: 12
#     serviceGroupID: "serviceGroupID_value"
#   }) {
#     serviceCoveredID
#     name
#     percentageCovered
#     maxAmount
#     maxVisits
#     maxUnits
#     unitMinutesSize
#     timePeriod
#     serviceGroup {
#       serviceGroupID
#       name
#       percentageCovered
#       maxCombined
#       timePeriod
#     }
#   }
# }
